// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blob.proto

/*
Package blob is a generated protocol buffer package.

It is generated from these files:
	blob.proto

It has these top-level messages:
	InitRequest
	InitResponse
	MoveRequest
	MoveResponse
	RegionRequest
	RegionResponse
	Player
	Food
*/
package blob

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InitRequest struct {
}

func (m *InitRequest) Reset()                    { *m = InitRequest{} }
func (m *InitRequest) String() string            { return proto.CompactTextString(m) }
func (*InitRequest) ProtoMessage()               {}
func (*InitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type InitResponse struct {
	Id   string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	X    float64 `protobuf:"fixed64,2,opt,name=x" json:"x,omitempty"`
	Y    float64 `protobuf:"fixed64,3,opt,name=y" json:"y,omitempty"`
	Mass int32   `protobuf:"varint,4,opt,name=mass" json:"mass,omitempty"`
}

func (m *InitResponse) Reset()                    { *m = InitResponse{} }
func (m *InitResponse) String() string            { return proto.CompactTextString(m) }
func (*InitResponse) ProtoMessage()               {}
func (*InitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InitResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InitResponse) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *InitResponse) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *InitResponse) GetMass() int32 {
	if m != nil {
		return m.Mass
	}
	return 0
}

type MoveRequest struct {
	Id string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	X  float64 `protobuf:"fixed64,2,opt,name=x" json:"x,omitempty"`
	Y  float64 `protobuf:"fixed64,3,opt,name=y" json:"y,omitempty"`
}

func (m *MoveRequest) Reset()                    { *m = MoveRequest{} }
func (m *MoveRequest) String() string            { return proto.CompactTextString(m) }
func (*MoveRequest) ProtoMessage()               {}
func (*MoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MoveRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MoveRequest) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *MoveRequest) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

type MoveResponse struct {
	X     float64 `protobuf:"fixed64,1,opt,name=x" json:"x,omitempty"`
	Y     float64 `protobuf:"fixed64,2,opt,name=y" json:"y,omitempty"`
	Alive bool    `protobuf:"varint,3,opt,name=alive" json:"alive,omitempty"`
	Mass  int32   `protobuf:"varint,4,opt,name=mass" json:"mass,omitempty"`
}

func (m *MoveResponse) Reset()                    { *m = MoveResponse{} }
func (m *MoveResponse) String() string            { return proto.CompactTextString(m) }
func (*MoveResponse) ProtoMessage()               {}
func (*MoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MoveResponse) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *MoveResponse) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *MoveResponse) GetAlive() bool {
	if m != nil {
		return m.Alive
	}
	return false
}

func (m *MoveResponse) GetMass() int32 {
	if m != nil {
		return m.Mass
	}
	return 0
}

type RegionRequest struct {
	X float64 `protobuf:"fixed64,1,opt,name=x" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y" json:"y,omitempty"`
}

func (m *RegionRequest) Reset()                    { *m = RegionRequest{} }
func (m *RegionRequest) String() string            { return proto.CompactTextString(m) }
func (*RegionRequest) ProtoMessage()               {}
func (*RegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RegionRequest) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *RegionRequest) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

type RegionResponse struct {
	Players []*Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	Foods   []*Food   `protobuf:"bytes,2,rep,name=foods" json:"foods,omitempty"`
}

func (m *RegionResponse) Reset()                    { *m = RegionResponse{} }
func (m *RegionResponse) String() string            { return proto.CompactTextString(m) }
func (*RegionResponse) ProtoMessage()               {}
func (*RegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RegionResponse) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *RegionResponse) GetFoods() []*Food {
	if m != nil {
		return m.Foods
	}
	return nil
}

type Player struct {
	String_ string  `protobuf:"bytes,1,opt,name=string" json:"string,omitempty"`
	X       float64 `protobuf:"fixed64,2,opt,name=x" json:"x,omitempty"`
	Y       float64 `protobuf:"fixed64,3,opt,name=y" json:"y,omitempty"`
	Alive   bool    `protobuf:"varint,4,opt,name=alive" json:"alive,omitempty"`
	Mass    int32   `protobuf:"varint,5,opt,name=mass" json:"mass,omitempty"`
}

func (m *Player) Reset()                    { *m = Player{} }
func (m *Player) String() string            { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()               {}
func (*Player) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Player) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

func (m *Player) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Player) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Player) GetAlive() bool {
	if m != nil {
		return m.Alive
	}
	return false
}

func (m *Player) GetMass() int32 {
	if m != nil {
		return m.Mass
	}
	return 0
}

type Food struct {
	X float64 `protobuf:"fixed64,2,opt,name=x" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,3,opt,name=y" json:"y,omitempty"`
}

func (m *Food) Reset()                    { *m = Food{} }
func (m *Food) String() string            { return proto.CompactTextString(m) }
func (*Food) ProtoMessage()               {}
func (*Food) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Food) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Food) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func init() {
	proto.RegisterType((*InitRequest)(nil), "blob.InitRequest")
	proto.RegisterType((*InitResponse)(nil), "blob.InitResponse")
	proto.RegisterType((*MoveRequest)(nil), "blob.MoveRequest")
	proto.RegisterType((*MoveResponse)(nil), "blob.MoveResponse")
	proto.RegisterType((*RegionRequest)(nil), "blob.RegionRequest")
	proto.RegisterType((*RegionResponse)(nil), "blob.RegionResponse")
	proto.RegisterType((*Player)(nil), "blob.Player")
	proto.RegisterType((*Food)(nil), "blob.Food")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Blob service

type BlobClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	Region(ctx context.Context, in *RegionRequest, opts ...grpc.CallOption) (*RegionResponse, error)
}

type blobClient struct {
	cc *grpc.ClientConn
}

func NewBlobClient(cc *grpc.ClientConn) BlobClient {
	return &blobClient{cc}
}

func (c *blobClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := grpc.Invoke(ctx, "/blob.Blob/Init", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := grpc.Invoke(ctx, "/blob.Blob/Move", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobClient) Region(ctx context.Context, in *RegionRequest, opts ...grpc.CallOption) (*RegionResponse, error) {
	out := new(RegionResponse)
	err := grpc.Invoke(ctx, "/blob.Blob/Region", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Blob service

type BlobServer interface {
	Init(context.Context, *InitRequest) (*InitResponse, error)
	Move(context.Context, *MoveRequest) (*MoveResponse, error)
	Region(context.Context, *RegionRequest) (*RegionResponse, error)
}

func RegisterBlobServer(s *grpc.Server, srv BlobServer) {
	s.RegisterService(&_Blob_serviceDesc, srv)
}

func _Blob_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blob.Blob/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blob_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blob.Blob/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blob_Region_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobServer).Region(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blob.Blob/Region",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobServer).Region(ctx, req.(*RegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Blob_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blob.Blob",
	HandlerType: (*BlobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _Blob_Init_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _Blob_Move_Handler,
		},
		{
			MethodName: "Region",
			Handler:    _Blob_Region_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blob.proto",
}

func init() { proto.RegisterFile("blob.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x41, 0x4b, 0x33, 0x31,
	0x10, 0x6d, 0xb6, 0xd9, 0xfd, 0x3e, 0xa7, 0xdb, 0x82, 0x63, 0x91, 0xd0, 0xd3, 0x92, 0x83, 0x2c,
	0x08, 0x15, 0x2a, 0x1e, 0xbc, 0x7a, 0x10, 0x3c, 0x28, 0x12, 0x3c, 0x79, 0xeb, 0xb2, 0x69, 0x09,
	0xac, 0x9b, 0xda, 0xac, 0xa5, 0xfd, 0x35, 0xfe, 0x55, 0x49, 0xb2, 0x91, 0x2d, 0x94, 0x05, 0x6f,
	0x99, 0xcc, 0x7b, 0x93, 0x37, 0xef, 0x05, 0xa0, 0xa8, 0x74, 0x31, 0xdf, 0x6c, 0x75, 0xa3, 0x91,
	0xda, 0x33, 0x1f, 0xc3, 0xe8, 0xa9, 0x56, 0x8d, 0x90, 0x9f, 0x5f, 0xd2, 0x34, 0xfc, 0x05, 0x52,
	0x5f, 0x9a, 0x8d, 0xae, 0x8d, 0xc4, 0x09, 0x44, 0xaa, 0x64, 0x24, 0x23, 0xf9, 0x99, 0x88, 0x54,
	0x89, 0x29, 0x90, 0x3d, 0x8b, 0x32, 0x92, 0x13, 0x41, 0xf6, 0xb6, 0x3a, 0xb0, 0xa1, 0xaf, 0x0e,
	0x88, 0x40, 0x3f, 0x96, 0xc6, 0x30, 0x9a, 0x91, 0x3c, 0x16, 0xee, 0xcc, 0xef, 0x61, 0xf4, 0xac,
	0x77, 0xb2, 0x1d, 0xff, 0x97, 0x71, 0xfc, 0x0d, 0x52, 0x4f, 0x6d, 0xa5, 0x38, 0x2c, 0x39, 0xc2,
	0x46, 0xe1, 0xe9, 0x29, 0xc4, 0xcb, 0x4a, 0xed, 0xa4, 0x63, 0xff, 0x17, 0xbe, 0x38, 0x29, 0xe8,
	0x1a, 0xc6, 0x42, 0xae, 0x95, 0xae, 0x83, 0xa4, 0x9e, 0xb1, 0xfc, 0x1d, 0x26, 0x01, 0xdc, 0x8a,
	0xb8, 0x82, 0x7f, 0x9b, 0x6a, 0x79, 0x90, 0x5b, 0xc3, 0x48, 0x36, 0xcc, 0x47, 0x8b, 0x74, 0xee,
	0x2c, 0x7d, 0x75, 0x97, 0x22, 0x34, 0x31, 0x83, 0x78, 0xa5, 0x75, 0x69, 0x58, 0xe4, 0x50, 0xe0,
	0x51, 0x8f, 0x5a, 0x97, 0xc2, 0x37, 0xf8, 0x0a, 0x12, 0x4f, 0xc2, 0x4b, 0x48, 0x4c, 0xb3, 0x55,
	0xf5, 0xba, 0x35, 0xa6, 0xad, 0x7a, 0xbd, 0xfe, 0x5d, 0x98, 0x9e, 0x5a, 0x38, 0xee, 0x2c, 0xcc,
	0x81, 0xda, 0x67, 0xfb, 0xa6, 0x2d, 0xbe, 0x09, 0xd0, 0x87, 0x4a, 0x17, 0x78, 0x03, 0xd4, 0xc6,
	0x8f, 0xe7, 0x5e, 0x6f, 0xe7, 0x67, 0xcc, 0xb0, 0x7b, 0xe5, 0xdd, 0xe0, 0x03, 0x4b, 0xb0, 0x21,
	0x05, 0x42, 0x27, 0xeb, 0x40, 0xe8, 0x66, 0xc8, 0x07, 0x78, 0x07, 0x89, 0xb7, 0x14, 0x2f, 0x7c,
	0xff, 0x28, 0x8d, 0xd9, 0xf4, 0xf8, 0x32, 0xd0, 0x8a, 0xc4, 0xfd, 0xd9, 0xdb, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x06, 0x80, 0x4b, 0xfa, 0xc1, 0x02, 0x00, 0x00,
}
